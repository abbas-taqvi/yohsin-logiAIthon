// automatically generated by the FlatBuffers compiler, do not modify

// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod daily_blotter_life_cycle {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum DailyBlotterOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct DailyBlotter<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for DailyBlotter<'a> {
        type Inner = DailyBlotter<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> DailyBlotter<'a> {
        pub const VT_ORDERDATE: flatbuffers::VOffsetT = 4;
        pub const VT_ORDERTIME: flatbuffers::VOffsetT = 6;
        pub const VT_ACCOUNTNUMBER: flatbuffers::VOffsetT = 8;
        pub const VT_ACCOUNTNAME: flatbuffers::VOffsetT = 10;
        pub const VT_TRADERID: flatbuffers::VOffsetT = 12;
        pub const VT_SYMBOL: flatbuffers::VOffsetT = 14;
        pub const VT_ORDERCC: flatbuffers::VOffsetT = 16;
        pub const VT_ORDERIT: flatbuffers::VOffsetT = 18;
        pub const VT_ORDERID: flatbuffers::VOffsetT = 20;
        pub const VT_ORDERIDSEQ: flatbuffers::VOffsetT = 22;
        pub const VT_PORDERID: flatbuffers::VOffsetT = 24;
        pub const VT_ACTION: flatbuffers::VOffsetT = 26;
        pub const VT_SIDE: flatbuffers::VOffsetT = 28;
        pub const VT_QTY: flatbuffers::VOffsetT = 30;
        pub const VT_MAXFLOOR: flatbuffers::VOffsetT = 32;
        pub const VT_PRICE: flatbuffers::VOffsetT = 34;
        pub const VT_TYPE_: flatbuffers::VOffsetT = 36;
        pub const VT_DEST: flatbuffers::VOffsetT = 38;
        pub const VT_QTYEXEC: flatbuffers::VOffsetT = 40;
        pub const VT_PRICEEXEC: flatbuffers::VOffsetT = 42;
        pub const VT_EXECMKT: flatbuffers::VOffsetT = 44;
        pub const VT_CUMQTY: flatbuffers::VOffsetT = 46;
        pub const VT_QTYLEAVES: flatbuffers::VOffsetT = 48;
        pub const VT_CLORDERID: flatbuffers::VOffsetT = 50;
        pub const VT_CLORDERIDORIG: flatbuffers::VOffsetT = 52;
        pub const VT_ROOT: flatbuffers::VOffsetT = 54;
        pub const VT_EXP: flatbuffers::VOffsetT = 56;
        pub const VT_STRIKE: flatbuffers::VOffsetT = 58;
        pub const VT_ORDERCP: flatbuffers::VOffsetT = 60;
        pub const VT_CLIENTID: flatbuffers::VOffsetT = 62;
        pub const VT_FIRMID: flatbuffers::VOffsetT = 64;
        pub const VT_POSEFF: flatbuffers::VOffsetT = 66;
        pub const VT_TRADEID: flatbuffers::VOffsetT = 68;
        pub const VT_EXECID: flatbuffers::VOffsetT = 70;
        pub const VT_DATASOURCE: flatbuffers::VOffsetT = 72;
        pub const VT_DATASUBSOURCE: flatbuffers::VOffsetT = 74;
        pub const VT_EXT: flatbuffers::VOffsetT = 76;
        pub const VT_SMP: flatbuffers::VOffsetT = 78;
        pub const VT_MOI: flatbuffers::VOffsetT = 80;
        pub const VT_STOPPRICE: flatbuffers::VOffsetT = 82;
        pub const VT_ORDERTEXT: flatbuffers::VOffsetT = 84;
        pub const VT_ORDERVO: flatbuffers::VOffsetT = 86;
        pub const VT_ROUTE: flatbuffers::VOffsetT = 88;
        pub const VT_ORDERTF: flatbuffers::VOffsetT = 90;
        pub const VT_ISSUED: flatbuffers::VOffsetT = 92;
        pub const VT_IMIDRPT: flatbuffers::VOffsetT = 94;
        pub const VT_IMIDRCV: flatbuffers::VOffsetT = 96;
        pub const VT_DIR: flatbuffers::VOffsetT = 98;
        pub const VT_HELD: flatbuffers::VOffsetT = 100;
        pub const VT_OPID: flatbuffers::VOffsetT = 102;
        pub const VT_FILENAME: flatbuffers::VOffsetT = 104;
        pub const VT_ID: flatbuffers::VOffsetT = 106;
        pub const VT_TIF: flatbuffers::VOffsetT = 108;
        pub const VT_ISBLOTTER: flatbuffers::VOffsetT = 110;
        pub const VT_EXTCLORDERID: flatbuffers::VOffsetT = 112;
        pub const VT_TRADER_NAME: flatbuffers::VOffsetT = 114;
        pub const VT_CREATED_DATE: flatbuffers::VOffsetT = 116;

        #[inline]

        // # Safety
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            DailyBlotter { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args DailyBlotterArgs<'args>,
        ) -> flatbuffers::WIPOffset<DailyBlotter<'bldr>> {
            let mut builder = DailyBlotterBuilder::new(_fbb);
            builder.add_created_date(args.created_date);
            builder.add_id(args.id);
            builder.add_stopprice(args.stopprice);
            builder.add_priceexec(args.priceexec);
            builder.add_qtyexec(args.qtyexec);
            builder.add_price(args.price);
            builder.add_qty(args.qty);
            builder.add_ordertime(args.ordertime);
            builder.add_orderdate(args.orderdate);
            if let Some(x) = args.trader_name {
                builder.add_trader_name(x);
            }
            if let Some(x) = args.extclorderid {
                builder.add_extclorderid(x);
            }
            if let Some(x) = args.tif {
                builder.add_tif(x);
            }
            if let Some(x) = args.filename {
                builder.add_filename(x);
            }
            if let Some(x) = args.opid {
                builder.add_opid(x);
            }
            if let Some(x) = args.imidrcv {
                builder.add_imidrcv(x);
            }
            if let Some(x) = args.imidrpt {
                builder.add_imidrpt(x);
            }
            if let Some(x) = args.issued {
                builder.add_issued(x);
            }
            if let Some(x) = args.ordertf {
                builder.add_ordertf(x);
            }
            if let Some(x) = args.route {
                builder.add_route(x);
            }
            if let Some(x) = args.ordervo {
                builder.add_ordervo(x);
            }
            if let Some(x) = args.ordertext {
                builder.add_ordertext(x);
            }
            if let Some(x) = args.moi {
                builder.add_moi(x);
            }
            if let Some(x) = args.smp {
                builder.add_smp(x);
            }
            if let Some(x) = args.ext {
                builder.add_ext(x);
            }
            if let Some(x) = args.datasubsource {
                builder.add_datasubsource(x);
            }
            if let Some(x) = args.datasource {
                builder.add_datasource(x);
            }
            if let Some(x) = args.execid {
                builder.add_execid(x);
            }
            if let Some(x) = args.tradeid {
                builder.add_tradeid(x);
            }
            if let Some(x) = args.poseff {
                builder.add_poseff(x);
            }
            if let Some(x) = args.firmid {
                builder.add_firmid(x);
            }
            if let Some(x) = args.clientid {
                builder.add_clientid(x);
            }
            if let Some(x) = args.ordercp {
                builder.add_ordercp(x);
            }
            if let Some(x) = args.strike {
                builder.add_strike(x);
            }
            if let Some(x) = args.exp {
                builder.add_exp(x);
            }
            if let Some(x) = args.root {
                builder.add_root(x);
            }
            if let Some(x) = args.clorderidorig {
                builder.add_clorderidorig(x);
            }
            if let Some(x) = args.clorderid {
                builder.add_clorderid(x);
            }
            builder.add_qtyleaves(args.qtyleaves);
            builder.add_cumqty(args.cumqty);
            if let Some(x) = args.execmkt {
                builder.add_execmkt(x);
            }
            if let Some(x) = args.dest {
                builder.add_dest(x);
            }
            if let Some(x) = args.type_ {
                builder.add_type_(x);
            }
            builder.add_maxfloor(args.maxfloor);
            if let Some(x) = args.side {
                builder.add_side(x);
            }
            if let Some(x) = args.action {
                builder.add_action(x);
            }
            if let Some(x) = args.porderid {
                builder.add_porderid(x);
            }
            if let Some(x) = args.orderidseq {
                builder.add_orderidseq(x);
            }
            if let Some(x) = args.orderid {
                builder.add_orderid(x);
            }
            if let Some(x) = args.orderit {
                builder.add_orderit(x);
            }
            if let Some(x) = args.ordercc {
                builder.add_ordercc(x);
            }
            if let Some(x) = args.symbol {
                builder.add_symbol(x);
            }
            if let Some(x) = args.traderid {
                builder.add_traderid(x);
            }
            if let Some(x) = args.accountname {
                builder.add_accountname(x);
            }
            if let Some(x) = args.accountnumber {
                builder.add_accountnumber(x);
            }
            builder.add_isblotter(args.isblotter);
            builder.add_held(args.held);
            builder.add_dir(args.dir);
            builder.finish()
        }

        #[inline]
        pub fn orderdate(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i64>(DailyBlotter::VT_ORDERDATE, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn ordertime(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i64>(DailyBlotter::VT_ORDERTIME, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn accountnumber(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ACCOUNTNUMBER, None)
            }
        }
        #[inline]
        pub fn accountname(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ACCOUNTNAME, None)
            }
        }
        #[inline]
        pub fn traderid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_TRADERID, None)
            }
        }
        #[inline]
        pub fn symbol(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_SYMBOL, None)
            }
        }
        #[inline]
        pub fn ordercc(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERCC, None)
            }
        }
        #[inline]
        pub fn orderit(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERIT, None)
            }
        }
        #[inline]
        pub fn orderid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERID, None)
            }
        }
        #[inline]
        pub fn orderidseq(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERIDSEQ, None)
            }
        }
        #[inline]
        pub fn porderid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_PORDERID, None)
            }
        }
        #[inline]
        pub fn action(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ACTION, None)
            }
        }
        #[inline]
        pub fn side(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_SIDE, None)
            }
        }
        #[inline]
        pub fn qty(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i64>(DailyBlotter::VT_QTY, Some(0)).unwrap() }
        }
        #[inline]
        pub fn maxfloor(&self) -> i32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i32>(DailyBlotter::VT_MAXFLOOR, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn price(&self) -> f64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<f64>(DailyBlotter::VT_PRICE, Some(0.0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn type_(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_TYPE_, None)
            }
        }
        #[inline]
        pub fn dest(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_DEST, None)
            }
        }
        #[inline]
        pub fn qtyexec(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i64>(DailyBlotter::VT_QTYEXEC, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn priceexec(&self) -> f64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<f64>(DailyBlotter::VT_PRICEEXEC, Some(0.0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn execmkt(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_EXECMKT, None)
            }
        }
        #[inline]
        pub fn cumqty(&self) -> i32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i32>(DailyBlotter::VT_CUMQTY, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn qtyleaves(&self) -> i32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i32>(DailyBlotter::VT_QTYLEAVES, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn clorderid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_CLORDERID, None)
            }
        }
        #[inline]
        pub fn clorderidorig(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_CLORDERIDORIG, None)
            }
        }
        #[inline]
        pub fn root(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ROOT, None)
            }
        }
        #[inline]
        pub fn exp(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_EXP, None)
            }
        }
        #[inline]
        pub fn strike(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_STRIKE, None)
            }
        }
        #[inline]
        pub fn ordercp(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERCP, None)
            }
        }
        #[inline]
        pub fn clientid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_CLIENTID, None)
            }
        }
        #[inline]
        pub fn firmid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_FIRMID, None)
            }
        }
        #[inline]
        pub fn poseff(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_POSEFF, None)
            }
        }
        #[inline]
        pub fn tradeid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_TRADEID, None)
            }
        }
        #[inline]
        pub fn execid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_EXECID, None)
            }
        }
        #[inline]
        pub fn datasource(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_DATASOURCE, None)
            }
        }
        #[inline]
        pub fn datasubsource(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_DATASUBSOURCE, None)
            }
        }
        #[inline]
        pub fn ext(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_EXT, None)
            }
        }
        #[inline]
        pub fn smp(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_SMP, None)
            }
        }
        #[inline]
        pub fn moi(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_MOI, None)
            }
        }
        #[inline]
        pub fn stopprice(&self) -> f64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<f64>(DailyBlotter::VT_STOPPRICE, Some(0.0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn ordertext(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERTEXT, None)
            }
        }
        #[inline]
        pub fn ordervo(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERVO, None)
            }
        }
        #[inline]
        pub fn route(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ROUTE, None)
            }
        }
        #[inline]
        pub fn ordertf(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ORDERTF, None)
            }
        }
        #[inline]
        pub fn issued(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_ISSUED, None)
            }
        }
        #[inline]
        pub fn imidrpt(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_IMIDRPT, None)
            }
        }
        #[inline]
        pub fn imidrcv(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_IMIDRCV, None)
            }
        }
        #[inline]
        pub fn dir(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<bool>(DailyBlotter::VT_DIR, Some(false))
                    .unwrap()
            }
        }
        #[inline]
        pub fn held(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<bool>(DailyBlotter::VT_HELD, Some(false))
                    .unwrap()
            }
        }
        #[inline]
        pub fn opid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_OPID, None)
            }
        }
        #[inline]
        pub fn filename(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_FILENAME, None)
            }
        }
        #[inline]
        pub fn id(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i64>(DailyBlotter::VT_ID, Some(0)).unwrap() }
        }
        #[inline]
        pub fn tif(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_TIF, None)
            }
        }
        #[inline]
        pub fn isblotter(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<bool>(DailyBlotter::VT_ISBLOTTER, Some(false))
                    .unwrap()
            }
        }
        #[inline]
        pub fn extclorderid(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_EXTCLORDERID, None)
            }
        }
        #[inline]
        pub fn trader_name(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(DailyBlotter::VT_TRADER_NAME, None)
            }
        }
        #[inline]
        pub fn created_date(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i64>(DailyBlotter::VT_CREATED_DATE, Some(0))
                    .unwrap()
            }
        }
    }

    impl flatbuffers::Verifiable for DailyBlotter<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<i64>("orderdate", Self::VT_ORDERDATE, false)?
                .visit_field::<i64>("ordertime", Self::VT_ORDERTIME, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "accountnumber",
                    Self::VT_ACCOUNTNUMBER,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "accountname",
                    Self::VT_ACCOUNTNAME,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "traderid",
                    Self::VT_TRADERID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "symbol",
                    Self::VT_SYMBOL,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "ordercc",
                    Self::VT_ORDERCC,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "orderit",
                    Self::VT_ORDERIT,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "orderid",
                    Self::VT_ORDERID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "orderidseq",
                    Self::VT_ORDERIDSEQ,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "porderid",
                    Self::VT_PORDERID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "action",
                    Self::VT_ACTION,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("side", Self::VT_SIDE, false)?
                .visit_field::<i64>("qty", Self::VT_QTY, false)?
                .visit_field::<i32>("maxfloor", Self::VT_MAXFLOOR, false)?
                .visit_field::<f64>("price", Self::VT_PRICE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dest", Self::VT_DEST, false)?
                .visit_field::<i64>("qtyexec", Self::VT_QTYEXEC, false)?
                .visit_field::<f64>("priceexec", Self::VT_PRICEEXEC, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "execmkt",
                    Self::VT_EXECMKT,
                    false,
                )?
                .visit_field::<i32>("cumqty", Self::VT_CUMQTY, false)?
                .visit_field::<i32>("qtyleaves", Self::VT_QTYLEAVES, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "clorderid",
                    Self::VT_CLORDERID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "clorderidorig",
                    Self::VT_CLORDERIDORIG,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("root", Self::VT_ROOT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("exp", Self::VT_EXP, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "strike",
                    Self::VT_STRIKE,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "ordercp",
                    Self::VT_ORDERCP,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "clientid",
                    Self::VT_CLIENTID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "firmid",
                    Self::VT_FIRMID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "poseff",
                    Self::VT_POSEFF,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "tradeid",
                    Self::VT_TRADEID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "execid",
                    Self::VT_EXECID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "datasource",
                    Self::VT_DATASOURCE,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "datasubsource",
                    Self::VT_DATASUBSOURCE,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ext", Self::VT_EXT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("smp", Self::VT_SMP, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("moi", Self::VT_MOI, false)?
                .visit_field::<f64>("stopprice", Self::VT_STOPPRICE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "ordertext",
                    Self::VT_ORDERTEXT,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "ordervo",
                    Self::VT_ORDERVO,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("route", Self::VT_ROUTE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "ordertf",
                    Self::VT_ORDERTF,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "issued",
                    Self::VT_ISSUED,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "imidrpt",
                    Self::VT_IMIDRPT,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "imidrcv",
                    Self::VT_IMIDRCV,
                    false,
                )?
                .visit_field::<bool>("dir", Self::VT_DIR, false)?
                .visit_field::<bool>("held", Self::VT_HELD, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("opid", Self::VT_OPID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "filename",
                    Self::VT_FILENAME,
                    false,
                )?
                .visit_field::<i64>("id", Self::VT_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tif", Self::VT_TIF, false)?
                .visit_field::<bool>("isblotter", Self::VT_ISBLOTTER, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "extclorderid",
                    Self::VT_EXTCLORDERID,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "trader_name",
                    Self::VT_TRADER_NAME,
                    false,
                )?
                .visit_field::<i64>("created_date", Self::VT_CREATED_DATE, false)?
                .finish();
            Ok(())
        }
    }
    pub struct DailyBlotterArgs<'a> {
        pub orderdate: i64,
        pub ordertime: i64,
        pub accountnumber: Option<flatbuffers::WIPOffset<&'a str>>,
        pub accountname: Option<flatbuffers::WIPOffset<&'a str>>,
        pub traderid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub symbol: Option<flatbuffers::WIPOffset<&'a str>>,
        pub ordercc: Option<flatbuffers::WIPOffset<&'a str>>,
        pub orderit: Option<flatbuffers::WIPOffset<&'a str>>,
        pub orderid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub orderidseq: Option<flatbuffers::WIPOffset<&'a str>>,
        pub porderid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub action: Option<flatbuffers::WIPOffset<&'a str>>,
        pub side: Option<flatbuffers::WIPOffset<&'a str>>,
        pub qty: i64,
        pub maxfloor: i32,
        pub price: f64,
        pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
        pub dest: Option<flatbuffers::WIPOffset<&'a str>>,
        pub qtyexec: i64,
        pub priceexec: f64,
        pub execmkt: Option<flatbuffers::WIPOffset<&'a str>>,
        pub cumqty: i32,
        pub qtyleaves: i32,
        pub clorderid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub clorderidorig: Option<flatbuffers::WIPOffset<&'a str>>,
        pub root: Option<flatbuffers::WIPOffset<&'a str>>,
        pub exp: Option<flatbuffers::WIPOffset<&'a str>>,
        pub strike: Option<flatbuffers::WIPOffset<&'a str>>,
        pub ordercp: Option<flatbuffers::WIPOffset<&'a str>>,
        pub clientid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub firmid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub poseff: Option<flatbuffers::WIPOffset<&'a str>>,
        pub tradeid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub execid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub datasource: Option<flatbuffers::WIPOffset<&'a str>>,
        pub datasubsource: Option<flatbuffers::WIPOffset<&'a str>>,
        pub ext: Option<flatbuffers::WIPOffset<&'a str>>,
        pub smp: Option<flatbuffers::WIPOffset<&'a str>>,
        pub moi: Option<flatbuffers::WIPOffset<&'a str>>,
        pub stopprice: f64,
        pub ordertext: Option<flatbuffers::WIPOffset<&'a str>>,
        pub ordervo: Option<flatbuffers::WIPOffset<&'a str>>,
        pub route: Option<flatbuffers::WIPOffset<&'a str>>,
        pub ordertf: Option<flatbuffers::WIPOffset<&'a str>>,
        pub issued: Option<flatbuffers::WIPOffset<&'a str>>,
        pub imidrpt: Option<flatbuffers::WIPOffset<&'a str>>,
        pub imidrcv: Option<flatbuffers::WIPOffset<&'a str>>,
        pub dir: bool,
        pub held: bool,
        pub opid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub filename: Option<flatbuffers::WIPOffset<&'a str>>,
        pub id: i64,
        pub tif: Option<flatbuffers::WIPOffset<&'a str>>,
        pub isblotter: bool,
        pub extclorderid: Option<flatbuffers::WIPOffset<&'a str>>,
        pub trader_name: Option<flatbuffers::WIPOffset<&'a str>>,
        pub created_date: i64,
    }
    impl<'a> Default for DailyBlotterArgs<'a> {
        #[inline]
        fn default() -> Self {
            DailyBlotterArgs {
                orderdate: 0,
                ordertime: 0,
                accountnumber: None,
                accountname: None,
                traderid: None,
                symbol: None,
                ordercc: None,
                orderit: None,
                orderid: None,
                orderidseq: None,
                porderid: None,
                action: None,
                side: None,
                qty: 0,
                maxfloor: 0,
                price: 0.0,
                type_: None,
                dest: None,
                qtyexec: 0,
                priceexec: 0.0,
                execmkt: None,
                cumqty: 0,
                qtyleaves: 0,
                clorderid: None,
                clorderidorig: None,
                root: None,
                exp: None,
                strike: None,
                ordercp: None,
                clientid: None,
                firmid: None,
                poseff: None,
                tradeid: None,
                execid: None,
                datasource: None,
                datasubsource: None,
                ext: None,
                smp: None,
                moi: None,
                stopprice: 0.0,
                ordertext: None,
                ordervo: None,
                route: None,
                ordertf: None,
                issued: None,
                imidrpt: None,
                imidrcv: None,
                dir: false,
                held: false,
                opid: None,
                filename: None,
                id: 0,
                tif: None,
                isblotter: false,
                extclorderid: None,
                trader_name: None,
                created_date: 0,
            }
        }
    }

    pub struct DailyBlotterBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DailyBlotterBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_orderdate(&mut self, orderdate: i64) {
            self.fbb_
                .push_slot::<i64>(DailyBlotter::VT_ORDERDATE, orderdate, 0);
        }
        #[inline]
        pub fn add_ordertime(&mut self, ordertime: i64) {
            self.fbb_
                .push_slot::<i64>(DailyBlotter::VT_ORDERTIME, ordertime, 0);
        }
        #[inline]
        pub fn add_accountnumber(&mut self, accountnumber: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_ACCOUNTNUMBER,
                accountnumber,
            );
        }
        #[inline]
        pub fn add_accountname(&mut self, accountname: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_ACCOUNTNAME,
                accountname,
            );
        }
        #[inline]
        pub fn add_traderid(&mut self, traderid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_TRADERID, traderid);
        }
        #[inline]
        pub fn add_symbol(&mut self, symbol: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_SYMBOL, symbol);
        }
        #[inline]
        pub fn add_ordercc(&mut self, ordercc: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ORDERCC, ordercc);
        }
        #[inline]
        pub fn add_orderit(&mut self, orderit: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ORDERIT, orderit);
        }
        #[inline]
        pub fn add_orderid(&mut self, orderid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ORDERID, orderid);
        }
        #[inline]
        pub fn add_orderidseq(&mut self, orderidseq: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_ORDERIDSEQ,
                orderidseq,
            );
        }
        #[inline]
        pub fn add_porderid(&mut self, porderid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_PORDERID, porderid);
        }
        #[inline]
        pub fn add_action(&mut self, action: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ACTION, action);
        }
        #[inline]
        pub fn add_side(&mut self, side: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_SIDE, side);
        }
        #[inline]
        pub fn add_qty(&mut self, qty: i64) {
            self.fbb_.push_slot::<i64>(DailyBlotter::VT_QTY, qty, 0);
        }
        #[inline]
        pub fn add_maxfloor(&mut self, maxfloor: i32) {
            self.fbb_
                .push_slot::<i32>(DailyBlotter::VT_MAXFLOOR, maxfloor, 0);
        }
        #[inline]
        pub fn add_price(&mut self, price: f64) {
            self.fbb_
                .push_slot::<f64>(DailyBlotter::VT_PRICE, price, 0.0);
        }
        #[inline]
        pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_TYPE_, type_);
        }
        #[inline]
        pub fn add_dest(&mut self, dest: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_DEST, dest);
        }
        #[inline]
        pub fn add_qtyexec(&mut self, qtyexec: i64) {
            self.fbb_
                .push_slot::<i64>(DailyBlotter::VT_QTYEXEC, qtyexec, 0);
        }
        #[inline]
        pub fn add_priceexec(&mut self, priceexec: f64) {
            self.fbb_
                .push_slot::<f64>(DailyBlotter::VT_PRICEEXEC, priceexec, 0.0);
        }
        #[inline]
        pub fn add_execmkt(&mut self, execmkt: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_EXECMKT, execmkt);
        }
        #[inline]
        pub fn add_cumqty(&mut self, cumqty: i32) {
            self.fbb_
                .push_slot::<i32>(DailyBlotter::VT_CUMQTY, cumqty, 0);
        }
        #[inline]
        pub fn add_qtyleaves(&mut self, qtyleaves: i32) {
            self.fbb_
                .push_slot::<i32>(DailyBlotter::VT_QTYLEAVES, qtyleaves, 0);
        }
        #[inline]
        pub fn add_clorderid(&mut self, clorderid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_CLORDERID,
                clorderid,
            );
        }
        #[inline]
        pub fn add_clorderidorig(&mut self, clorderidorig: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_CLORDERIDORIG,
                clorderidorig,
            );
        }
        #[inline]
        pub fn add_root(&mut self, root: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ROOT, root);
        }
        #[inline]
        pub fn add_exp(&mut self, exp: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_EXP, exp);
        }
        #[inline]
        pub fn add_strike(&mut self, strike: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_STRIKE, strike);
        }
        #[inline]
        pub fn add_ordercp(&mut self, ordercp: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ORDERCP, ordercp);
        }
        #[inline]
        pub fn add_clientid(&mut self, clientid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_CLIENTID, clientid);
        }
        #[inline]
        pub fn add_firmid(&mut self, firmid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_FIRMID, firmid);
        }
        #[inline]
        pub fn add_poseff(&mut self, poseff: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_POSEFF, poseff);
        }
        #[inline]
        pub fn add_tradeid(&mut self, tradeid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_TRADEID, tradeid);
        }
        #[inline]
        pub fn add_execid(&mut self, execid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_EXECID, execid);
        }
        #[inline]
        pub fn add_datasource(&mut self, datasource: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_DATASOURCE,
                datasource,
            );
        }
        #[inline]
        pub fn add_datasubsource(&mut self, datasubsource: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_DATASUBSOURCE,
                datasubsource,
            );
        }
        #[inline]
        pub fn add_ext(&mut self, ext: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_EXT, ext);
        }
        #[inline]
        pub fn add_smp(&mut self, smp: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_SMP, smp);
        }
        #[inline]
        pub fn add_moi(&mut self, moi: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_MOI, moi);
        }
        #[inline]
        pub fn add_stopprice(&mut self, stopprice: f64) {
            self.fbb_
                .push_slot::<f64>(DailyBlotter::VT_STOPPRICE, stopprice, 0.0);
        }
        #[inline]
        pub fn add_ordertext(&mut self, ordertext: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_ORDERTEXT,
                ordertext,
            );
        }
        #[inline]
        pub fn add_ordervo(&mut self, ordervo: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ORDERVO, ordervo);
        }
        #[inline]
        pub fn add_route(&mut self, route: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ROUTE, route);
        }
        #[inline]
        pub fn add_ordertf(&mut self, ordertf: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ORDERTF, ordertf);
        }
        #[inline]
        pub fn add_issued(&mut self, issued: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_ISSUED, issued);
        }
        #[inline]
        pub fn add_imidrpt(&mut self, imidrpt: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_IMIDRPT, imidrpt);
        }
        #[inline]
        pub fn add_imidrcv(&mut self, imidrcv: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_IMIDRCV, imidrcv);
        }
        #[inline]
        pub fn add_dir(&mut self, dir: bool) {
            self.fbb_
                .push_slot::<bool>(DailyBlotter::VT_DIR, dir, false);
        }
        #[inline]
        pub fn add_held(&mut self, held: bool) {
            self.fbb_
                .push_slot::<bool>(DailyBlotter::VT_HELD, held, false);
        }
        #[inline]
        pub fn add_opid(&mut self, opid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_OPID, opid);
        }
        #[inline]
        pub fn add_filename(&mut self, filename: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_FILENAME, filename);
        }
        #[inline]
        pub fn add_id(&mut self, id: i64) {
            self.fbb_.push_slot::<i64>(DailyBlotter::VT_ID, id, 0);
        }
        #[inline]
        pub fn add_tif(&mut self, tif: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(DailyBlotter::VT_TIF, tif);
        }
        #[inline]
        pub fn add_isblotter(&mut self, isblotter: bool) {
            self.fbb_
                .push_slot::<bool>(DailyBlotter::VT_ISBLOTTER, isblotter, false);
        }
        #[inline]
        pub fn add_extclorderid(&mut self, extclorderid: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_EXTCLORDERID,
                extclorderid,
            );
        }
        #[inline]
        pub fn add_trader_name(&mut self, trader_name: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(
                DailyBlotter::VT_TRADER_NAME,
                trader_name,
            );
        }
        #[inline]
        pub fn add_created_date(&mut self, created_date: i64) {
            self.fbb_
                .push_slot::<i64>(DailyBlotter::VT_CREATED_DATE, created_date, 0);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> DailyBlotterBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            DailyBlotterBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<DailyBlotter<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for DailyBlotter<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("DailyBlotter");
            ds.field("orderdate", &self.orderdate());
            ds.field("ordertime", &self.ordertime());
            ds.field("accountnumber", &self.accountnumber());
            ds.field("accountname", &self.accountname());
            ds.field("traderid", &self.traderid());
            ds.field("symbol", &self.symbol());
            ds.field("ordercc", &self.ordercc());
            ds.field("orderit", &self.orderit());
            ds.field("orderid", &self.orderid());
            ds.field("orderidseq", &self.orderidseq());
            ds.field("porderid", &self.porderid());
            ds.field("action", &self.action());
            ds.field("side", &self.side());
            ds.field("qty", &self.qty());
            ds.field("maxfloor", &self.maxfloor());
            ds.field("price", &self.price());
            ds.field("type_", &self.type_());
            ds.field("dest", &self.dest());
            ds.field("qtyexec", &self.qtyexec());
            ds.field("priceexec", &self.priceexec());
            ds.field("execmkt", &self.execmkt());
            ds.field("cumqty", &self.cumqty());
            ds.field("qtyleaves", &self.qtyleaves());
            ds.field("clorderid", &self.clorderid());
            ds.field("clorderidorig", &self.clorderidorig());
            ds.field("root", &self.root());
            ds.field("exp", &self.exp());
            ds.field("strike", &self.strike());
            ds.field("ordercp", &self.ordercp());
            ds.field("clientid", &self.clientid());
            ds.field("firmid", &self.firmid());
            ds.field("poseff", &self.poseff());
            ds.field("tradeid", &self.tradeid());
            ds.field("execid", &self.execid());
            ds.field("datasource", &self.datasource());
            ds.field("datasubsource", &self.datasubsource());
            ds.field("ext", &self.ext());
            ds.field("smp", &self.smp());
            ds.field("moi", &self.moi());
            ds.field("stopprice", &self.stopprice());
            ds.field("ordertext", &self.ordertext());
            ds.field("ordervo", &self.ordervo());
            ds.field("route", &self.route());
            ds.field("ordertf", &self.ordertf());
            ds.field("issued", &self.issued());
            ds.field("imidrpt", &self.imidrpt());
            ds.field("imidrcv", &self.imidrcv());
            ds.field("dir", &self.dir());
            ds.field("held", &self.held());
            ds.field("opid", &self.opid());
            ds.field("filename", &self.filename());
            ds.field("id", &self.id());
            ds.field("tif", &self.tif());
            ds.field("isblotter", &self.isblotter());
            ds.field("extclorderid", &self.extclorderid());
            ds.field("trader_name", &self.trader_name());
            ds.field("created_date", &self.created_date());
            ds.finish()
        }
    }
} // pub mod DailyBlotterLifeCycle
